Home task №10

//-----------------------------------------------------------------------------------------------------------
*    Задание 1#
*    Метод принимает на вход список имен. Вернуть строку в виде: "1. Ivan, 3. Peter ...", с именами из списка,
*    стоящими под нечетным индексом (1, 3 и т.д.).
*
*   Создан класс ListHandler
*   с методом public String getOdd(List<String> list)
*
*
//-----------------------------------------------------------------------------------------------------------
*    Задание 2#
*    Дан массив: ["1, 2, 0", "4, 5"]. Получить из массива все числа, вернуть в отсортированном виде,
*    разделенные запятой, то есть "0, 1, 2, 4, 5"
*
*   Создан класс ListHandler
*   с методом public List<String> toUpperCaseReversed(List<String> list)
*
*
//-----------------------------------------------------------------------------------------------------------
*    Задание 3#
*    Дан массив: ["1, 2, 0", "4, 5"]. Получить из массива все числа, вернуть в отсортированном виде,
*    разделенные запятой, то есть "0, 1, 2, 4, 5"
*
*   Создан класс ArraySort
*   с методом public static Object sort(String[] strings)
*
*
//-----------------------------------------------------------------------------------------------------------
*    Задание 4#
*    Метод принимает на вход список из строк (можно список из Задания 1). Возвращает список этих строк в
*    верхнем регистре и отсортированные по убыванию (от Z до А).
*
*   Создан класс Random
*   с методом public Stream<Long> streamLong(long a, long c, long m, long seed)
*
*
//-----------------------------------------------------------------------------------------------------------
*    Задание 5#
*    Напишите метод public static <T> Stream<T> zip(Stream<T> first, Stream<T> second),
*    который "перемешивает" элементы из стримов first и second, останавливается тогда,
*    когда у одного из стримов закончатся элементы.
*
*   Создан класс StreamMixer
*   с методом public static <T> Stream<T> zip(Stream<T> first, Stream<T> second)
*
*
//-----------------------------------------------------------------------------------------------------------